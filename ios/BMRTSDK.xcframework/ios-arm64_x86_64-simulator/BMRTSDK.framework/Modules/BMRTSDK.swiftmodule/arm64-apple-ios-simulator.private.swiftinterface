// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BMRTSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
@_exported import BMRTSDK
import Combine
import CoreBluetooth
import Foundation
import Photos
import ReplayKit
import Security
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum HTTPModelShortType : Swift.String, Swift.CaseIterable {
  case JSON
  case XML
  case HTML
  case IMAGE
  case OTHER
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BMRTSDK.HTTPModelShortType]
  public typealias RawValue = Swift.String
  public static var allCases: [BMRTSDK.HTTPModelShortType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension BMRTSDK.HTTPModelShortType {
  public init(contentType: Swift.String)
}
public enum SwiftyJSONError : Swift.Int, Swift.Error {
  case unsupportedType
  case indexOutOfBounds
  case elementTooDeep
  case wrongType
  case notExist
  case invalidJSON
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension BMRTSDK.SwiftyJSONError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public enum Type : Swift.Int {
  case number
  case string
  case bool
  case array
  case dictionary
  case null
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct JSON {
  public init(data: Foundation.Data, options opt: Foundation.JSONSerialization.ReadingOptions = []) throws
  public init(_ object: Any)
  public init(parseJSON jsonString: Swift.String)
  public mutating func merge(with other: BMRTSDK.JSON) throws
  public func merged(with other: BMRTSDK.JSON) throws -> BMRTSDK.JSON
  public var type: BMRTSDK.`Type` {
    get
  }
  public var error: BMRTSDK.SwiftyJSONError? {
    get
  }
  public var object: Any {
    get
    set
  }
  @available(*, unavailable, renamed: "null")
  public static var nullJSON: BMRTSDK.JSON {
    get
  }
  public static var null: BMRTSDK.JSON {
    get
  }
}
public enum Index<T> : Swift.Comparable {
  case array(Swift.Int)
  case dictionary(Swift.DictionaryIndex<Swift.String, T>)
  case null
  public static func == (lhs: BMRTSDK.Index<T>, rhs: BMRTSDK.Index<T>) -> Swift.Bool
  public static func < (lhs: BMRTSDK.Index<T>, rhs: BMRTSDK.Index<T>) -> Swift.Bool
}
public typealias JSONIndex = BMRTSDK.Index<BMRTSDK.JSON>
public typealias JSONRawIndex = BMRTSDK.Index<Any>
extension BMRTSDK.JSON : Swift.Collection {
  public typealias Index = BMRTSDK.JSONRawIndex
  public var startIndex: BMRTSDK.JSON.Index {
    get
  }
  public var endIndex: BMRTSDK.JSON.Index {
    get
  }
  public func index(after i: BMRTSDK.JSON.Index) -> BMRTSDK.JSON.Index
  public subscript(position: BMRTSDK.JSON.Index) -> (Swift.String, BMRTSDK.JSON) {
    get
  }
  public typealias Element = (Swift.String, BMRTSDK.JSON)
  public typealias Indices = Swift.DefaultIndices<BMRTSDK.JSON>
  public typealias Iterator = Swift.IndexingIterator<BMRTSDK.JSON>
  public typealias SubSequence = Swift.Slice<BMRTSDK.JSON>
}
public enum JSONKey {
  case index(Swift.Int)
  case key(Swift.String)
}
public protocol JSONSubscriptType {
  var jsonKey: BMRTSDK.JSONKey { get }
}
extension Swift.Int : BMRTSDK.JSONSubscriptType {
  public var jsonKey: BMRTSDK.JSONKey {
    get
  }
}
extension Swift.String : BMRTSDK.JSONSubscriptType {
  public var jsonKey: BMRTSDK.JSONKey {
    get
  }
}
extension BMRTSDK.JSON {
  public subscript(path: [any BMRTSDK.JSONSubscriptType]) -> BMRTSDK.JSON {
    get
    set
  }
  public subscript(path: any BMRTSDK.JSONSubscriptType...) -> BMRTSDK.JSON {
    get
    set
  }
}
extension BMRTSDK.JSON : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StringLiteralType)
  public init(extendedGraphemeClusterLiteral value: Swift.StringLiteralType)
  public init(unicodeScalarLiteral value: Swift.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
extension BMRTSDK.JSON : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension BMRTSDK.JSON : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.BooleanLiteralType)
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
extension BMRTSDK.JSON : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.FloatLiteralType)
  public typealias FloatLiteralType = Swift.FloatLiteralType
}
extension BMRTSDK.JSON : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Any)...)
  public typealias Key = Swift.String
  public typealias Value = Any
}
extension BMRTSDK.JSON : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Any...)
  public typealias ArrayLiteralElement = Any
}
extension BMRTSDK.JSON : Swift.RawRepresentable {
  public init?(rawValue: Any)
  public var rawValue: Any {
    get
  }
  public func rawData(options opt: Foundation.JSONSerialization.WritingOptions = JSONSerialization.WritingOptions(rawValue: 0)) throws -> Foundation.Data
  public func rawString(_ encoding: Swift.String.Encoding = .utf8, options opt: Foundation.JSONSerialization.WritingOptions = .prettyPrinted) -> Swift.String?
  public func rawString(_ options: [BMRTSDK.writingOptionsKeys : Any]) -> Swift.String?
  public typealias RawValue = Any
}
extension BMRTSDK.JSON : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension BMRTSDK.JSON {
  public var array: [BMRTSDK.JSON]? {
    get
  }
  public var arrayValue: [BMRTSDK.JSON] {
    get
  }
  public var arrayObject: [Any]? {
    get
    set
  }
}
extension BMRTSDK.JSON {
  public var dictionary: [Swift.String : BMRTSDK.JSON]? {
    get
  }
  public var dictionaryValue: [Swift.String : BMRTSDK.JSON] {
    get
  }
  public var dictionaryObject: [Swift.String : Any]? {
    get
    set
  }
}
extension BMRTSDK.JSON {
  public var bool: Swift.Bool? {
    get
    set
  }
  public var boolValue: Swift.Bool {
    get
    set
  }
}
extension BMRTSDK.JSON {
  public var string: Swift.String? {
    get
    set
  }
  public var stringValue: Swift.String {
    get
    set
  }
}
extension BMRTSDK.JSON {
  public var number: Foundation.NSNumber? {
    get
    set
  }
  public var numberValue: Foundation.NSNumber {
    get
    set
  }
}
extension BMRTSDK.JSON {
  public var null: Foundation.NSNull? {
    get
    set
  }
  public func exists() -> Swift.Bool
}
extension BMRTSDK.JSON {
  public var url: Foundation.URL? {
    get
    set
  }
}
extension BMRTSDK.JSON {
  public var double: Swift.Double? {
    get
    set
  }
  public var doubleValue: Swift.Double {
    get
    set
  }
  public var float: Swift.Float? {
    get
    set
  }
  public var floatValue: Swift.Float {
    get
    set
  }
  public var int: Swift.Int? {
    get
    set
  }
  public var intValue: Swift.Int {
    get
    set
  }
  public var uInt: Swift.UInt? {
    get
    set
  }
  public var uIntValue: Swift.UInt {
    get
    set
  }
  public var int8: Swift.Int8? {
    get
    set
  }
  public var int8Value: Swift.Int8 {
    get
    set
  }
  public var uInt8: Swift.UInt8? {
    get
    set
  }
  public var uInt8Value: Swift.UInt8 {
    get
    set
  }
  public var int16: Swift.Int16? {
    get
    set
  }
  public var int16Value: Swift.Int16 {
    get
    set
  }
  public var uInt16: Swift.UInt16? {
    get
    set
  }
  public var uInt16Value: Swift.UInt16 {
    get
    set
  }
  public var int32: Swift.Int32? {
    get
    set
  }
  public var int32Value: Swift.Int32 {
    get
    set
  }
  public var uInt32: Swift.UInt32? {
    get
    set
  }
  public var uInt32Value: Swift.UInt32 {
    get
    set
  }
  public var int64: Swift.Int64? {
    get
    set
  }
  public var int64Value: Swift.Int64 {
    get
    set
  }
  public var uInt64: Swift.UInt64? {
    get
    set
  }
  public var uInt64Value: Swift.UInt64 {
    get
    set
  }
}
extension BMRTSDK.JSON : Swift.Comparable {
}
public func == (lhs: BMRTSDK.JSON, rhs: BMRTSDK.JSON) -> Swift.Bool
public func <= (lhs: BMRTSDK.JSON, rhs: BMRTSDK.JSON) -> Swift.Bool
public func >= (lhs: BMRTSDK.JSON, rhs: BMRTSDK.JSON) -> Swift.Bool
public func > (lhs: BMRTSDK.JSON, rhs: BMRTSDK.JSON) -> Swift.Bool
public func < (lhs: BMRTSDK.JSON, rhs: BMRTSDK.JSON) -> Swift.Bool
public enum writingOptionsKeys {
  case jsonSerialization
  case castNilToNSNull
  case maxObjextDepth
  case encoding
  public static func == (a: BMRTSDK.writingOptionsKeys, b: BMRTSDK.writingOptionsKeys) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension BMRTSDK.JSON : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@_inheritsConvenienceInitializers @objc open class BMRTNetworkTrace : ObjectiveC.NSObject {
  @objc open class func sharedInstance() -> BMRTSDK.BMRTNetworkTrace
  @objc open func start()
  @objc open func ignoreURL(_ url: Swift.String)
  @objc open func ignoreURLs(_ urls: [Swift.String])
  @objc open func ignoreURLsWithRegex(_ regex: Swift.String)
  @objc open func ignoreURLsWithRegexes(_ regexes: [Swift.String])
  @objc override dynamic public init()
  @objc deinit
}
public func trace(_ message: Swift.String = "", file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13.0, *)
public class BMRT : ObjectiveC.NSObject {
  public static func launch(token: Swift.String)
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (BMRTSDK.Reachability) -> ()
  public typealias NetworkUnreachable = (BMRTSDK.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: BMRTSDK.Reachability.NetworkStatus, b: BMRTSDK.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    @available(*, deprecated, renamed: "unavailable")
    public static let none: BMRTSDK.Reachability.Connection
    public static func == (a: BMRTSDK.Reachability.Connection, b: BMRTSDK.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: BMRTSDK.Reachability.NetworkReachable?
  public var whenUnreachable: BMRTSDK.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: BMRTSDK.Reachability.Connection {
    get
  }
  public var connection: BMRTSDK.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension BMRTSDK.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc open class BMRTNetworkTracingProtocol : Foundation.URLProtocol {
  @objc override dynamic open class func canInit(with request: Foundation.URLRequest) -> Swift.Bool
  @objc override dynamic open class func canInit(with task: Foundation.URLSessionTask) -> Swift.Bool
  @objc override dynamic open func startLoading()
  @objc override dynamic open func stopLoading()
  @objc override dynamic open class func canonicalRequest(for request: Foundation.URLRequest) -> Foundation.URLRequest
  @objc override dynamic public init(request: Foundation.URLRequest, cachedResponse: Foundation.CachedURLResponse?, client: (any Foundation.URLProtocolClient)?)
  @objc deinit
}
extension BMRTSDK.BMRTNetworkTracingProtocol : Foundation.URLSessionDataDelegate {
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
}
extension UIKit.UIWindow {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func motionEnded(_ motion: UIKit.UIEvent.EventSubtype, with event: UIKit.UIEvent?)
}
extension BMRTSDK.HTTPModelShortType : Swift.Equatable {}
extension BMRTSDK.HTTPModelShortType : Swift.Hashable {}
extension BMRTSDK.HTTPModelShortType : Swift.RawRepresentable {}
extension BMRTSDK.SwiftyJSONError : Swift.Equatable {}
extension BMRTSDK.SwiftyJSONError : Swift.Hashable {}
extension BMRTSDK.SwiftyJSONError : Swift.RawRepresentable {}
extension BMRTSDK.`Type` : Swift.Equatable {}
extension BMRTSDK.`Type` : Swift.Hashable {}
extension BMRTSDK.`Type` : Swift.RawRepresentable {}
extension BMRTSDK.writingOptionsKeys : Swift.Equatable {}
extension BMRTSDK.writingOptionsKeys : Swift.Hashable {}
@available(*, unavailable, renamed: "Connection")
extension BMRTSDK.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension BMRTSDK.Reachability.NetworkStatus : Swift.Hashable {}
extension BMRTSDK.Reachability.Connection : Swift.Equatable {}
extension BMRTSDK.Reachability.Connection : Swift.Hashable {}
